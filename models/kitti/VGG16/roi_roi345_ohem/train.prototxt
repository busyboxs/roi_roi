name: "VGG_ILSVRC_16_layers"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'im_info'
  top: 'gt_boxes'
  python_param {
    module: 'roi_data_layer.layer'
    layer: 'RoIDataLayer'
    param_str: "'num_classes': 2"
  }
}

layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
# ========= CONV 5 ========
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}


#==========CONV4 Backwards ======
# reduce conv5_3 channels
layer {
  name: "conv5_256"
  type: "Convolution"
  bottom: "conv5_3"
  top: "conv5_256"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 0
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "conv5_256_relu"
  type: "ReLU"
  bottom: "conv5_256"
  top: "conv5_256"
}

# Upsample conv5_3
layer {
  name: "conv5_256_up"
  type: "Deconvolution"
  bottom: "conv5_256"
  top: "conv5_256_up"
  convolution_param {
    kernel_size: 4
    stride: 2
    num_output: 256
    group: 256
    pad: 1
    weight_filler: { type: "bilinear" }
    bias_term: false
  }
  param { lr_mult: 0 decay_mult: 0 }
}



layer {
  name: "conv4_256"
  type: "Convolution"
  bottom: "conv4_3"
  top: "conv4_256"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 0
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "conv4_256_relu"
  type: "ReLU"
  bottom: "conv4_256"
  top: "conv4_256"
}

# Crop conv5_3
layer {
  name: "conv5_256_crop"
  type: "Crop"
  bottom: "conv5_256_up"
  bottom: "conv4_256"
  top: "conv5_256_crop"
  crop_param {
    axis: 2
    offset: 0
  }
}

# Eltwise summation
layer {
  name: "conv4_fuse"
  type: "Eltwise"
  bottom: "conv5_256_crop"
  bottom: "conv4_256"
  top: "conv4_fuse"
  eltwise_param {
    operation: SUM
  }
}
# Perform final 3x3 convolution
layer {
  name: "conv4_fuse_final"
  type: "Convolution"
  bottom: "conv4_fuse"
  top: "conv4_fuse_final"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "conv4_fuse_final_relu"
  type: "ReLU"
  bottom: "conv4_fuse_final"
  top: "conv4_fuse_final"
}

#=========CONV 4 UP=======
# Upsample conv4_3
layer {
  name: "conv4_256_up"
  type: "Deconvolution"
  bottom: "conv4_fuse"
  top: "conv4_256_up"
  convolution_param {
    kernel_size: 4
    stride: 2
    num_output: 256
    group: 256
    pad: 1
    weight_filler: { type: "bilinear" }
    bias_term: false
  }
  param { lr_mult: 0 decay_mult: 0 }
}

layer {
  name: "conv3_256"
  type: "Convolution"
  bottom: "conv3_3"
  top: "conv3_256"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 0
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "conv3_256_relu"
  type: "ReLU"
  bottom: "conv3_256"
  top: "conv3_256"
}

# Crop conv4_3
layer {
  name: "conv4_256_crop"
  type: "Crop"
  bottom: "conv4_256_up"
  bottom: "conv3_256"
  top: "conv4_256_crop"
  crop_param {
    axis: 2
    offset: 0
  }
}

# Eltwise summation
layer {
  name: "conv3_fuse"
  type: "Eltwise"
  bottom: "conv4_256_crop"
  bottom: "conv3_256"
  top: "conv3_fuse"
  eltwise_param {
    operation: SUM
  }
}

# Perform final 3x3 convolution
layer {
  name: "conv3_fuse_final"
  type: "Convolution"
  bottom: "conv3_fuse"
  top: "conv3_fuse_final"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "conv3_fuse_final_relu"
  type: "ReLU"
  bottom: "conv3_fuse_final"
  top: "conv3_fuse_final"
}
#========= RPN P3 ========
# 3x3
layer {
  name: "rpn_conv/3x3/p3"
  type: "Convolution"
  bottom: "conv3_fuse_final"
  top: "rpn_conv/3x3_output/p3"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 256
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
# Dim red
layer {
  name: "rpn_dimred/3x3/p3"
  type: "Convolution"
  bottom: "conv3_fuse_final"
  top: "rpn_dimred_output/p3"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_dimred_relu/p3"
  type: "ReLU"
  bottom: "rpn_dimred_output/p3"
  top: "rpn_dimred_output/p3"
}

# 5x5
layer {
  name: "rpn_conv/5x5/p3"
  type: "Convolution"
  bottom: "rpn_dimred_output/p3"
  top: "rpn_conv/5x5_output/p3"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
#7x7
layer {
  name: "rpn_conv/7x7-1/p3"
  type: "Convolution"
  bottom: "rpn_dimred_output/p3"
  top: "rpn_conv/7x7-1_out/p3"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_relu/7x7-1/p3"
  type: "ReLU"
  bottom: "rpn_conv/7x7-1_out/p3"
  top: "rpn_conv/7x7-1_out/p3"
}
layer {
  name: "rpn_conv/7x7/p3"
  type: "Convolution"
  bottom: "rpn_conv/7x7-1_out/p3"
  top: "rpn_conv/7x7_output/p3"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
# rpn concat
layer{
  name: "rpn_conv/357/p3"
  type: "Concat"
  bottom: "rpn_conv/3x3_output/p3"
  bottom: "rpn_conv/5x5_output/p3"
  bottom: "rpn_conv/7x7_output/p3"
  top: "rpn_conv/357_output/p3"
  concat_param{
      axis: 1
  }
}
layer {
  name: "rpn_relu/357/p3"
  type: "ReLU"
  bottom: "rpn_conv/357_output/p3"
  top: "rpn_conv/357_output/p3"
}

layer {
  name: "rpn_cls_score/p3"
  type: "Convolution"
  bottom: "rpn_conv/357_output/p3"
  top: "rpn_cls_score/p3"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 12   # 2(bg/fg) * 6(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_bbox_pred/p3"
  type: "Convolution"
  bottom: "rpn_conv/357_output/p3"
  top: "rpn_bbox_pred/p3"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 24   # 4 * 6(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
   bottom: "rpn_cls_score/p3"
   top: "rpn_cls_score_reshape/p3"
   name: "rpn_cls_score_reshape/p3"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } 	}
}
layer {
  name: 'rpn-data/p3'
  type: 'Python'
  bottom: 'rpn_cls_score/p3'
  bottom: 'gt_boxes'
  bottom: 'im_info'
  bottom: 'data'
  top: 'rpn_labels/p3'
  top: 'rpn_bbox_targets/p3'
  top: 'rpn_bbox_inside_weights/p3'
  top: 'rpn_bbox_outside_weights/p3'
  python_param {
    module: 'rpn.anchor_target_layer'
    layer: 'AnchorTargetLayer'
    param_str: "{'feat_stride': 4, 'scales':[1,2], 'ratios': [0.5,1,2]}"
  }
}
layer {
  name: "rpn_loss_cls/p3"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape/p3"
  bottom: "rpn_labels/p3"
  propagate_down: 1
  propagate_down: 0
  top: "rpn_cls_loss/p3"
  loss_weight: 1
  loss_param {
    ignore_label: -1
    normalize: true
  }
}
layer {
  name: "rpn_loss_bbox/p3"
  type: "SmoothL1Loss"
  bottom: "rpn_bbox_pred/p3"
  bottom: "rpn_bbox_targets/p3"
  bottom: 'rpn_bbox_inside_weights/p3'
  bottom: 'rpn_bbox_outside_weights/p3'
  top: "rpn_loss_bbox/p3"
  loss_weight: 1
  smooth_l1_loss_param { sigma: 3.0 }
}
#========= RoI Proposal P3 ============

layer {
  name: "rpn_cls_prob/p3"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape/p3"
  top: "rpn_cls_prob/p3"
}

layer {
  name: 'rpn_cls_prob_reshape/p3'
  type: 'Reshape'
  bottom: 'rpn_cls_prob/p3'
  top: 'rpn_cls_prob_reshape/p3'
  reshape_param { shape { dim: 0 dim: 12 dim: -1 dim: 0 } 	}
}
layer {
  name: 'proposal/p3'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape/p3'
  bottom: 'rpn_bbox_pred/p3'
  bottom: 'im_info'
  top: 'rpn_rois/p3'
  python_param {
    module: 'rpn.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "{'feat_stride': 4, 'scales':[1,2], 'ratios': [0.5,1,2]}"
  }
}
#========= RPN P4 ========
# 3x3
layer {
  name: "rpn_conv/3x3/p4"
  type: "Convolution"
  bottom: "conv4_fuse_final"
  top: "rpn_conv/3x3_output/p4"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 256
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
# Dim red
layer {
  name: "rpn_dimred/3x3/p4"
  type: "Convolution"
  bottom: "conv4_fuse_final"
  top: "rpn_dimred_output/p4"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_dimred_relu/p4"
  type: "ReLU"
  bottom: "rpn_dimred_output/p4"
  top: "rpn_dimred_output/p4"
}
# 5x5
layer {
  name: "rpn_conv/5x5/p4"
  type: "Convolution"
  bottom: "rpn_dimred_output/p4"
  top: "rpn_conv/5x5_output/p4"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
#7x7
layer {
  name: "rpn_conv/7x7-1/p4"
  type: "Convolution"
  bottom: "rpn_dimred_output/p4"
  top: "rpn_conv/7x7-1_out/p4"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_relu/7x7-1/p4"
  type: "ReLU"
  bottom: "rpn_conv/7x7-1_out/p4"
  top: "rpn_conv/7x7-1_out/p4"
}
layer {
  name: "rpn_conv/7x7/p4"
  type: "Convolution"
  bottom: "rpn_conv/7x7-1_out/p4"
  top: "rpn_conv/7x7_output/p4"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
# rpn concat
layer{
  name: "rpn_conv/357/p4"
  type: "Concat"
  bottom: "rpn_conv/3x3_output/p4"
  bottom: "rpn_conv/5x5_output/p4"
  bottom: "rpn_conv/7x7_output/p4"
  top: "rpn_conv/357_output/p4"
  concat_param{
      axis: 1
  }
}
layer {
  name: "rpn_relu/357/p4"
  type: "ReLU"
  bottom: "rpn_conv/357_output/p4"
  top: "rpn_conv/357_output/p4"
}
layer {
  name: "rpn_cls_score/p4"
  type: "Convolution"
  bottom: "rpn_conv/357_output/p4"
  top: "rpn_cls_score/p4"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 12   # 2(bg/fg) * 6(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_bbox_pred/p4"
  type: "Convolution"
  bottom: "rpn_conv/357_output/p4"
  top: "rpn_bbox_pred/p4"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 24   # 4 * 6(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
   bottom: "rpn_cls_score/p4"
   top: "rpn_cls_score_reshape/p4"
   name: "rpn_cls_score_reshape/p4"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } 	}
}
layer {
  name: 'rpn-data/p4'
  type: 'Python'
  bottom: 'rpn_cls_score/p4'
  bottom: 'gt_boxes'
  bottom: 'im_info'
  bottom: 'data'
  top: 'rpn_labels/p4'
  top: 'rpn_bbox_targets/p4'
  top: 'rpn_bbox_inside_weights/p4'
  top: 'rpn_bbox_outside_weights/p4'
  python_param {
    module: 'rpn.anchor_target_layer'
    layer: 'AnchorTargetLayer'
    param_str: "{'feat_stride': 8, 'scales':[4,8], 'ratios': [0.5,1,2]}"
  }
}

layer {
  name: "rpn_loss_cls/p4"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape/p4"
  bottom: "rpn_labels/p4"
  propagate_down: 1
  propagate_down: 0
  top: "rpn_cls_loss/p4"
  loss_weight: 1
  loss_param {
    ignore_label: -1
    normalize: true
  }
}
layer {
  name: "rpn_loss_bbox/p4"
  type: "SmoothL1Loss"
  bottom: "rpn_bbox_pred/p4"
  bottom: "rpn_bbox_targets/p4"
  bottom: 'rpn_bbox_inside_weights/p4'
  bottom: 'rpn_bbox_outside_weights/p4'
  top: "rpn_loss_bbox/p4"
  loss_weight: 1
  smooth_l1_loss_param { sigma: 3.0 }
}
#========= RoI Proposal P4 ============

layer {
  name: "rpn_cls_prob/p4"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape/p4"
  top: "rpn_cls_prob/p4"
}

layer {
  name: 'rpn_cls_prob_reshape/p4'
  type: 'Reshape'
  bottom: 'rpn_cls_prob/p4'
  top: 'rpn_cls_prob_reshape/p4'
  reshape_param { shape { dim: 0 dim: 12 dim: -1 dim: 0 } }
}

layer {
  name: 'proposal/p4'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape/p4'
  bottom: 'rpn_bbox_pred/p4'
  bottom: 'im_info'
  top: 'rpn_rois/p4'
  python_param {
    module: 'rpn.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "{'feat_stride': 8, 'scales':[4,8], 'ratios': [0.5,1,2]}"
  }
}
#========= RPN P5 ============
# 3x3
layer {
  name: "rpn_conv/3x3/p5"
  type: "Convolution"
  bottom: "conv5_256"
  top: "rpn_conv/3x3_output/p5"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 256
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

# Dim red
layer {
  name: "rpn_dimred/3x3/p5"
  type: "Convolution"
  bottom: "conv5_256"
  top: "rpn_dimred_output/p5"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_dimred_relu/p5"
  type: "ReLU"
  bottom: "rpn_dimred_output/p5"
  top: "rpn_dimred_output/p5"
}
# 5x5
layer {
  name: "rpn_conv/5x5/p5"
  type: "Convolution"
  bottom: "rpn_dimred_output/p5"
  top: "rpn_conv/5x5_output/p5"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
#7x7
layer {
  name: "rpn_conv/7x7-1/p5"
  type: "Convolution"
  bottom: "rpn_dimred_output/p5"
  top: "rpn_conv/7x7-1_out/p5"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_relu/7x7-1/p5"
  type: "ReLU"
  bottom: "rpn_conv/7x7-1_out/p5"
  top: "rpn_conv/7x7-1_out/p5"
}

layer {
  name: "rpn_conv/7x7/p5"
  type: "Convolution"
  bottom: "rpn_conv/7x7-1_out/p5"
  top: "rpn_conv/7x7_output/p5"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer{
  name: "rpn_conv/357/p5"
  type: "Concat"
  bottom: "rpn_conv/3x3_output/p5"
  bottom: "rpn_conv/5x5_output/p5"
  bottom: "rpn_conv/7x7_output/p5"
  top: "rpn_conv/357_output/p5"
  concat_param{
      axis: 1
  }
}

layer {
  name: "rpn_relu/357/p5"
  type: "ReLU"
  bottom: "rpn_conv/357_output/p5"
  top: "rpn_conv/357_output/p5"
}

layer {
  name: "rpn_cls_score/p5"
  type: "Convolution"
  bottom: "rpn_conv/357_output/p5"
  top: "rpn_cls_score/p5"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 12   # 2(bg/fg) * 6(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "rpn_bbox_pred/p5"
  type: "Convolution"
  bottom: "rpn_conv/357_output/p5"
  top: "rpn_bbox_pred/p5"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 24   # 4 * 6(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
   bottom: "rpn_cls_score/p5"
   top: "rpn_cls_score_reshape/p5"
   name: "rpn_cls_score_reshape/p5"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}

layer {
  name: 'rpn-data/p5'
  type: 'Python'
  bottom: 'rpn_cls_score/p5'
  bottom: 'gt_boxes'
  bottom: 'im_info'
  bottom: 'data'
  top: 'rpn_labels/p5'
  top: 'rpn_bbox_targets/p5'
  top: 'rpn_bbox_inside_weights/p5'
  top: 'rpn_bbox_outside_weights/p5'
  python_param {
    module: 'rpn.anchor_target_layer'
    layer: 'AnchorTargetLayer'
    param_str: "{'feat_stride': 16,'scales': [16,32], 'ratios':[0.5,1,2]}"
  }
}

layer {
  name: "rpn_loss_cls/p5"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape/p5"
  bottom: "rpn_labels/p5"
  propagate_down: 1
  propagate_down: 0
  top: "rpn_cls_loss/p5"
  loss_weight: 1
  loss_param {
    ignore_label: -1
    normalize: true
  }
}

layer {
  name: "rpn_loss_bbox/p5"
  type: "SmoothL1Loss"
  bottom: "rpn_bbox_pred/p5"
  bottom: "rpn_bbox_targets/p5"
  bottom: 'rpn_bbox_inside_weights/p5'
  bottom: 'rpn_bbox_outside_weights/p5'
  top: "rpn_loss_bbox/p5"
  loss_weight: 1
  smooth_l1_loss_param { sigma: 3.0 }
}
#========= RoI Proposal P5 ============

layer {
  name: "rpn_cls_prob/p5"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape/p5"
  top: "rpn_cls_prob/p5"
}

layer {
  name: 'rpn_cls_prob_reshape/p5'
  type: 'Reshape'
  bottom: 'rpn_cls_prob/p5'
  top: 'rpn_cls_prob_reshape/p5'
  reshape_param { shape { dim: 0 dim: 12 dim: -1 dim: 0 } }
}

layer {
  name: 'proposal/p5'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape/p5'
  bottom: 'rpn_bbox_pred/p5'
  bottom: 'im_info'
  top: 'rpn_rois/p5'
  python_param {
    module: 'rpn.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "{'feat_stride': 16,'scales': [16,32], 'ratios':[0.5,1,2]}"
  }
}

#================ rois process ======================

layer {
  name: 'roi-data'
  type: 'Python'
  bottom: 'rpn_rois/p3'
  bottom: 'rpn_rois/p4'
  bottom: 'rpn_rois/p5'
  bottom: 'gt_boxes'
  top: 'rois'
  top: 'rois/p3'
  top: 'rois/p4'
  top: 'rois/p5'
  top: 'labels'
  top: 'bbox_targets'
  top: 'bbox_inside_weights'
  top: 'bbox_outside_weights'
  python_param {
    module: 'rpn.proposal_target_layer'
    layer: 'ProposalTargetLayer'
    param_str: "'num_classes': 2"
  }
}

#====== readonly roipooling ======
layer {
  name: "roi_pool5_readonly/p5"
  type: "ROIPooling"
  bottom: "conv5_256"
  bottom: "rois/p5"
  top: "pool5_readonly/p5"
  propagate_down: false
  propagate_down: false
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
    pad_ratio: 0
  }
}
layer {
  name: "roi_pool4_readonly/p4"
  type: "ROIPooling"
  bottom: "conv4_fuse_final"
  bottom: "rois/p4"
  top: "pool4_readonly/p4"
  propagate_down: false
  propagate_down: false
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.125 # 1/8
    pad_ratio: 0
  }
}
layer {
  name: "roi_pool3_readonly/p3"
  type: "ROIPooling"
  bottom: "conv3_fuse_final"
  bottom: "rois/p3"
  top: "pool3_readonly/p3"
  propagate_down: false
  propagate_down: false
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.25 # 1/4
    pad_ratio: 0
  }
}
layer {
  name: "all_pool_readonly"
  type: "Concat"
  bottom: "pool3_readonly/p3"
  bottom: "pool4_readonly/p4"
  bottom: "pool5_readonly/p5"
  top: "rcnn_pool_readonly"
  propagate_down: false
  concat_param {
    axis: 0
  }
}
layer {
  name: "fc6_readonly"
  type: "InnerProduct"
  bottom: "rcnn_pool_readonly"
  top: "fc6_readonly"
  propagate_down: false
  param {
    name: "fc6_w"
  }
  param {
    name: "fc6_b"
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6_readonly"
  type: "ReLU"
  bottom: "fc6_readonly"
  top: "fc6_readonly"
  propagate_down: false
}
layer {
  name: "drop6_readonly"
  type: "Dropout"
  bottom: "fc6_readonly"
  top: "fc6_readonly"
  propagate_down: false
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_readonly"
  type: "InnerProduct"
  bottom: "fc6_readonly"
  top: "fc7_readonly"
  propagate_down: false
  param {
    name: "fc7_w"
  }
  param {
    name: "fc7_b"
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7_readonly"
  type: "ReLU"
  bottom: "fc7_readonly"
  top: "fc7_readonly"
  propagate_down: false
}
layer {
  name: "drop7_readonly"
  type: "Dropout"
  bottom: "fc7_readonly"
  top: "fc7_readonly"
  propagate_down: false
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score_readonly"
  type: "InnerProduct"
  bottom: "fc7_readonly"
  top: "cls_score_readonly"
  propagate_down: false
  param {
    name: "cls_score_w"
  }
  param {
    name: "cls_score_b"
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bbox_pred_readonly"
  type: "InnerProduct"
  bottom: "fc7_readonly"
  top: "bbox_pred_readonly"
  propagate_down: false
  param {
    name: "bbox_pred_w"
  }
  param {
    name: "bbox_pred_b"
  }
  inner_product_param {
    num_output: 8
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cls_prob_readonly"
  type: "Softmax"
  bottom: "cls_score_readonly"
  top: "cls_prob_readonly"
  propagate_down: false
}
layer {
  name: "hard_roi_mining"
  type: "Python"
  bottom: "cls_prob_readonly"
  bottom: "bbox_pred_readonly"
  bottom: "rois"
  bottom: "labels"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "rois_hard_3"
  top: "rois_hard_4"
  top: "rois_hard_5"
  top: "rois_hard"
  top: "labels_hard"
  top: "bbox_targets_hard"
  top: "bbox_inside_weights_hard"
  top: "bbox_outside_weights_hard"
  propagate_down: false
  propagate_down: false
  propagate_down: false
  propagate_down: false
  propagate_down: false
  propagate_down: false
  propagate_down: false
  python_param {
    module: "roi_data_layer.layer"
    layer: "OHEMDataLayer"
    param_str: "'num_classes': 2"
  }
}
#========= RCNN ============
#======POOLING P5=======
layer {
  name: "roi_pool_org/p5"
  type: "ROIPooling"
  bottom: "conv5_256"
  bottom: "rois_hard_5"
  top: "roi_pool_org/p5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
    pad_ratio: 0
  }
}
layer {
  name: "roi_pool_ctx/p5"
  type: "ROIPooling"
  bottom: "conv5_256"
  bottom: "rois_hard_5"
  top: "roi_pool_ctx/p5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
    pad_ratio: 0
  }
}
layer {
  name: "roi_pool/p5"
  type: "Concat"
  bottom: "roi_pool_org/p5"
  bottom: "roi_pool_ctx/p5"
  top: "roi_pool/p5"
  concat_param {
    axis: 1
  }
}
layer {
  name: "roi_conv/p5"
  bottom: "roi_pool/p5"
  top: "roi_conv/p5"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "roi_conv/p5"
  top: "roi_conv/p5"
  name: "roi_conv_relu/p5"
  type: "ReLU"
}
#======POOLING P4=======
layer {
  name: "roi_pool_org/p4"
  type: "ROIPooling"
  bottom: "conv4_fuse_final"
  bottom: "rois_hard_4"
  top: "roi_pool_org/p4"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.125 # 1/8
    pad_ratio: 0
  }
}
layer {
  name: "roi_pool_ctx/p4"
  type: "ROIPooling"
  bottom: "conv4_fuse_final"
  bottom: "rois_hard_4"
  top: "roi_pool_ctx/p4"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.125 # 1/8
    pad_ratio: 0.25
  }
}
layer {
  name: "roi_pool/p4"
  type: "Concat"
  bottom: "roi_pool_org/p4"
  bottom: "roi_pool_ctx/p4"
  top: "roi_pool/p4"
  concat_param {
    axis: 1
  }
}
layer {
  name: "roi_conv/p4"
  bottom: "roi_pool/p4"
  top: "roi_conv/p4"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "roi_conv/p4"
  top: "roi_conv/p4"
  name: "roi_conv_relu/p4"
  type: "ReLU"
}
#======POOLING P3=======
layer {
  name: "roi_pool_org/p3"
  type: "ROIPooling"
  bottom: "conv3_fuse_final"
  bottom: "rois_hard_3"
  top: "roi_pool_org/p3"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.25 # 1/4
    pad_ratio: 0
  }
}
layer {
  name: "roi_pool_ctx/p3"
  type: "ROIPooling"
  bottom: "conv4_fuse_final"
  bottom: "rois_hard_3"
  top: "roi_pool_ctx/p3"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.25 # 1/4
    pad_ratio: 0.25
  }
}
layer {
  name: "roi_pool/p3"
  type: "Concat"
  bottom: "roi_pool_org/p3"
  bottom: "roi_pool_ctx/p3"
  top: "roi_pool/p3"
  concat_param {
    axis: 1
  }
}
layer {
  name: "roi_conv/p3"
  bottom: "roi_pool/p3"
  top: "roi_conv/p3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "roi_conv/p3"
  top: "roi_conv/p3"
  name: "roi_conv_relu/p3"
  type: "ReLU"
}

layer {
  name: "all_pool"
  type: "Concat"
  bottom: "roi_conv/p3"
  bottom: "roi_conv/p4"
  bottom: "roi_conv/p5"
  top: "rcnn_pool"
  concat_param {
    axis: 0
  }
}
#===============
layer {
  name: "rcnn_fc6"
  type: "InnerProduct"
  bottom: "rcnn_pool"
  top: "rcnn_fc6"
  param {
  	name: "fc6_w"
    lr_mult: 1
  }
  param {
  	name: "fc6_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "rcnn_fc6"
  top: "rcnn_fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "rcnn_fc6"
  top: "rcnn_fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "rcnn_fc6"
  top: "fc7"
  param {
    lr_mult: 1
    name: "fc7_w"
  }
  param {
    lr_mult: 2
    name: "fc7_b"
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
    type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "fc7"
  top: "cls_score"
  param {
    lr_mult: 1
    name: "cls_score_w"
  }
  param {
    lr_mult: 2
    name: "cls_score_b"
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7"
  top: "bbox_pred"
  param {
    lr_mult: 1
    name: "bbox_pred_w"
  }
  param {
    lr_mult: 2
    name: "bbox_pred_b"
  }
  inner_product_param {
    num_output: 8
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "cls_score"
  bottom: "labels"
  propagate_down: 1
  propagate_down: 0
  top: "loss_cls"
  loss_weight: 1
}
layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "bbox_pred"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "loss_bbox"
  loss_weight: 1
}